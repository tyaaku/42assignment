前提条件のテスト
Gitリポジトリが正常にクローンされました。

一般的な指示
Gitリポジトリにはsignature.txtファイルが含まれています。
シグネチャが学生の".vdi"ファイルと同一であることを確認します。
仮想マシンをクローンするか、スナップショットを作成してVMを開きます。

必須のパート（学生への質問）
仮想マシンはどのように動作し、その目的は何ですか？
CentOSとDebianの基本的な違いは何ですか？
彼らの選んだオペレーティングシステムは？
CentOSの場合：SELinuxとDNFは何ですか。
Debianの場合：aptitude、apt、およびAPPArmorの違いは何ですか。
ディフェンス中、スクリプトは10分ごとにすべての情報を表示する必要があります。その動作は後で詳細に確認されます。
すべての説明が満足できる（そうでない場合はここで評価が終了します）。

シンプルなセットアップ
マシンが起動時にグラフィカル環境を持っていないことを確認します。
VMに作成したユーザーとして接続します（rootではないユーザー）。
パスワードが必要な方針に従っていることを確認します（最小2日、最大7日、30日）。
			sudo chage -l ユーザー名
評価者がUFWサービスが開始されていることを確認します。
			sudo ufw status //ステータス：アクティブを探します
評価者がSSHサービスが開始されていることを確認します。
			sudo systemctl status ssh

選択したオペレーティングシステム（DebianまたはCentOS）を確認します。
			lsb_release -a || cat /etc/os-release

ユーザー
被験者が評価される学生のログイン名が仮想マシンに存在することを確認します。また、それが「sudo」と「user42」グループに属していることを確認します。
			getent group sudo
			getent group user42

パスワードポリシーチェック：
新しいユーザーを作成します（たとえば、user42）。
			sudo adduser 新しいユーザー名
被験者が課題のルールを守ってパスワードを割り当て、その方法を説明します。
通常、変更されたファイルは1つまたは2つあります。問題がある場合、評価はここで停止します。
新しいユーザーとともに、被験者に「evaluating」という名前のグループを作成して、それを新しいユーザーに割り当てるように頼んでください。
			sudo groupadd evaluating
			sudo usermod -aG evaluating あなたの新しいユーザー名
新しいユーザーが「evaluating」グループに属していることを確認します。
			getent group evaluating
被験者に、パスワードポリシーの利点（プロジェクトに必要であるという事実を超えて）を説明するように頼んでください。
被験者にポリシーの実装の利点/欠点について尋ねてください。

ホスト名とパーティション
マシンのホスト名が以下のように正しくフォーマットされていることを確認します：login42（被験者が評価される学生のログイン名）。
hostnamectl
このホスト名をあなたのログイン名で置き換えて変更し、次にVMを再起動します。
			sudo hostnamectl set-hostname 新しいホスト名
			sudo reboot
注意：再起動時にホスト名が更新されていない場合、評価はここで停止します。
マシンを元のホスト名に戻し、次にVMを再起動します。
			sudo hostnamectl set-hostname 元のホスト名
			sudo reboot
VMのパーティションを表示する方法を被験者に尋ねます。
			lsblk
出力を課題で示された例と比較します（ボーナスがある場合はボーナスの例を参照）。
被験者にLVMの概要とその動作方法について簡単に説明してもらいます。

SUDOの確認：

			dpkg -l | grep sudo
上記コマンドを実行して、"sudo"プログラムが正しくインストールされていることを確認します。

新しいユーザーを"sudo"グループに追加：
学生が新しいユーザーを"sudo"グループに追加する手順を実演します。

SUDOの価値と操作の説明：
学生は、自分自身が選んだ例を使って、"sudo"の価値と操作について説明します。

sudo visudo ls：

			sudo visudo ls
上記のコマンドで、学生は課題で課せられたルールの実装を示す必要があります。

"/var/log/sudo/" フォルダの確認：
"/var/log/sudo/" フォルダが存在し、少なくとも1つのファイルがあることを確認します。このファイルには、sudoで使用されたコマンドの履歴が含まれているはずです。

sudoを使用してコマンドを実行：
sudoを使用してコマンドを実行し、その後、"/var/log/sudo/" フォルダ内のファイルが更新されたか確認します。

UFW

UFWの確認：

sudo ufw status numbered
上記のコマンドで、UFWが正しくインストールされ、動作していることを確認します。

UFWの基本的な説明と価値：
学生にUFWの基本的な説明と使用する価値について説明を求めます。

UFWのアクティブなルールの表示：
アクティブなUFWのルールを表示します。ポート4242のためのルールが存在しているはずです。

ポート8080を開ける新しいルールの追加：

sudo ufw allow 8080
上記のコマンドで、ポート8080を開ける新しいルールを追加し、その後、アクティブなルールを確認して追加されたことを確認します。

学生の協力を得て新しいルールの削除：

sudo ufw delete 4
sudo ufw delete 2
上記のコマンドで、学生の協力を得て新しいルールを削除します。

SSH

SSHの確認：

sudo service ssh status
上記のコマンドで、SSHサービスが正しくインストールされ、ポート4242で動作していることを確認します。

SSHの説明と価値：
学生にSSHの説明と使用する価値について尋ねます（回答：セキュアシェル、2つのコンピュータが安全に通信できるようにする）。

SSHサービスがポート4242のみを使用していることの確認：
SSHサービスがポート4242のみを使用していることを確認します。

学生の協力を得て新しいユーザーでSSHログイン：

ssh new_user@127.0.0.1 -p 4242
上記のコマンドで、学生の新しいユーザーを使用してSSHログインする手伝いを求めます。鍵または簡単なパスワードを使用できます（評価される学生による）。

ルートユーザーでのSSHが不可能であることの確認：

ssh root@127.0.0.1 -p 4242
上記のコマンドを実行すると、"permission denied"と表示されるはずです。

スクリプトの監視

学生のスクリプトとその動作の説明：
学生に自身のスクリプトがどのように動作するかと、そのスクリプトのコードを示してもらいます。

スクリプトを設置したファイルの確認：

cd /usr/local/bin && vim monitoring.sh
上記のコマンドで、スクリプトが置かれたファイルを確認します。

"cron"とは何か：
"cron"についての説明を求めます。cronは、定期的なジョブのスケジューリングを行うためのUnixユーティリティです。

スクリプトがサーバーの起動時に10分ごとに実行される仕組み：
スクリプトがサーバーの起動時に10分ごとに実行されるようになっている方法を尋ねます。

スクリプトが動的な値で正しく実行されることの確認：

sudo crontab -u root -e (***10の値を1に変更***)
上記のコマンドで、スクリプトが正しく動的な値で実行されることを確認します。


スクリプトがサーバーの起動後にも正常に実行されるか確認：

sudo cronstop
sudo cronstart
上記のコマンドで、サーバーが起動した後もスクリプトが実行されているかを確認します。スクリプトが正常に動作している場合、サーバーの起動後にもスクリプトが再開されるはずです。

スクリプトが変更されずにサーバーが起動した後も存在し、権限が変更されていないことの確認：
サーバーを再起動して、スクリプトが依然として同じ場所に存在し、権限が変更されずにいるか確認します。
sudo reboot
sudo crontab -u root -e
以上で、スクリプトの正常な動作と、サーバーの起動後にもスクリプトが実行されるかを確認する作業が完了します。